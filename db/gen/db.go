// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAuthTokenStmt, err = db.PrepareContext(ctx, createAuthToken); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAuthToken: %w", err)
	}
	if q.createDistributionDetailStmt, err = db.PrepareContext(ctx, createDistributionDetail); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDistributionDetail: %w", err)
	}
	if q.createFlyerOrderStmt, err = db.PrepareContext(ctx, createFlyerOrder); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFlyerOrder: %w", err)
	}
	if q.createPrintDetailStmt, err = db.PrepareContext(ctx, createPrintDetail); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePrintDetail: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteAuthTokenByIDStmt, err = db.PrepareContext(ctx, deleteAuthTokenByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAuthTokenByID: %w", err)
	}
	if q.deleteAuthTokensByUserIDStmt, err = db.PrepareContext(ctx, deleteAuthTokensByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAuthTokensByUserID: %w", err)
	}
	if q.deleteOTPByPhoneNumberStmt, err = db.PrepareContext(ctx, deleteOTPByPhoneNumber); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOTPByPhoneNumber: %w", err)
	}
	if q.getAuthTokenByHashStmt, err = db.PrepareContext(ctx, getAuthTokenByHash); err != nil {
		return nil, fmt.Errorf("error preparing query GetAuthTokenByHash: %w", err)
	}
	if q.getAuthTokenByIDStmt, err = db.PrepareContext(ctx, getAuthTokenByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAuthTokenByID: %w", err)
	}
	if q.getAuthTokenByRefreshTokenStmt, err = db.PrepareContext(ctx, getAuthTokenByRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetAuthTokenByRefreshToken: %w", err)
	}
	if q.getFlyerOrderStmt, err = db.PrepareContext(ctx, getFlyerOrder); err != nil {
		return nil, fmt.Errorf("error preparing query GetFlyerOrder: %w", err)
	}
	if q.getOTPByPhoneNumberStmt, err = db.PrepareContext(ctx, getOTPByPhoneNumber); err != nil {
		return nil, fmt.Errorf("error preparing query GetOTPByPhoneNumber: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByPhoneNumberStmt, err = db.PrepareContext(ctx, getUserByPhoneNumber); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByPhoneNumber: %w", err)
	}
	if q.listAuthTokensByUserIDStmt, err = db.PrepareContext(ctx, listAuthTokensByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query ListAuthTokensByUserID: %w", err)
	}
	if q.listDistributionByOrderStmt, err = db.PrepareContext(ctx, listDistributionByOrder); err != nil {
		return nil, fmt.Errorf("error preparing query ListDistributionByOrder: %w", err)
	}
	if q.listFlyerOrdersByUserStmt, err = db.PrepareContext(ctx, listFlyerOrdersByUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListFlyerOrdersByUser: %w", err)
	}
	if q.listOTPVerificationsStmt, err = db.PrepareContext(ctx, listOTPVerifications); err != nil {
		return nil, fmt.Errorf("error preparing query ListOTPVerifications: %w", err)
	}
	if q.listPrintDetailsByOrderStmt, err = db.PrepareContext(ctx, listPrintDetailsByOrder); err != nil {
		return nil, fmt.Errorf("error preparing query ListPrintDetailsByOrder: %w", err)
	}
	if q.revokeAuthTokenStmt, err = db.PrepareContext(ctx, revokeAuthToken); err != nil {
		return nil, fmt.Errorf("error preparing query RevokeAuthToken: %w", err)
	}
	if q.updateAuthTokensStmt, err = db.PrepareContext(ctx, updateAuthTokens); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAuthTokens: %w", err)
	}
	if q.updateFlyerOrderStatusStmt, err = db.PrepareContext(ctx, updateFlyerOrderStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFlyerOrderStatus: %w", err)
	}
	if q.updateUserByPhoneNumberStmt, err = db.PrepareContext(ctx, updateUserByPhoneNumber); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserByPhoneNumber: %w", err)
	}
	if q.upsertOtpVerificationStmt, err = db.PrepareContext(ctx, upsertOtpVerification); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertOtpVerification: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAuthTokenStmt != nil {
		if cerr := q.createAuthTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAuthTokenStmt: %w", cerr)
		}
	}
	if q.createDistributionDetailStmt != nil {
		if cerr := q.createDistributionDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDistributionDetailStmt: %w", cerr)
		}
	}
	if q.createFlyerOrderStmt != nil {
		if cerr := q.createFlyerOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFlyerOrderStmt: %w", cerr)
		}
	}
	if q.createPrintDetailStmt != nil {
		if cerr := q.createPrintDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPrintDetailStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteAuthTokenByIDStmt != nil {
		if cerr := q.deleteAuthTokenByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAuthTokenByIDStmt: %w", cerr)
		}
	}
	if q.deleteAuthTokensByUserIDStmt != nil {
		if cerr := q.deleteAuthTokensByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAuthTokensByUserIDStmt: %w", cerr)
		}
	}
	if q.deleteOTPByPhoneNumberStmt != nil {
		if cerr := q.deleteOTPByPhoneNumberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOTPByPhoneNumberStmt: %w", cerr)
		}
	}
	if q.getAuthTokenByHashStmt != nil {
		if cerr := q.getAuthTokenByHashStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAuthTokenByHashStmt: %w", cerr)
		}
	}
	if q.getAuthTokenByIDStmt != nil {
		if cerr := q.getAuthTokenByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAuthTokenByIDStmt: %w", cerr)
		}
	}
	if q.getAuthTokenByRefreshTokenStmt != nil {
		if cerr := q.getAuthTokenByRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAuthTokenByRefreshTokenStmt: %w", cerr)
		}
	}
	if q.getFlyerOrderStmt != nil {
		if cerr := q.getFlyerOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFlyerOrderStmt: %w", cerr)
		}
	}
	if q.getOTPByPhoneNumberStmt != nil {
		if cerr := q.getOTPByPhoneNumberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOTPByPhoneNumberStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByPhoneNumberStmt != nil {
		if cerr := q.getUserByPhoneNumberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByPhoneNumberStmt: %w", cerr)
		}
	}
	if q.listAuthTokensByUserIDStmt != nil {
		if cerr := q.listAuthTokensByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAuthTokensByUserIDStmt: %w", cerr)
		}
	}
	if q.listDistributionByOrderStmt != nil {
		if cerr := q.listDistributionByOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listDistributionByOrderStmt: %w", cerr)
		}
	}
	if q.listFlyerOrdersByUserStmt != nil {
		if cerr := q.listFlyerOrdersByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFlyerOrdersByUserStmt: %w", cerr)
		}
	}
	if q.listOTPVerificationsStmt != nil {
		if cerr := q.listOTPVerificationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listOTPVerificationsStmt: %w", cerr)
		}
	}
	if q.listPrintDetailsByOrderStmt != nil {
		if cerr := q.listPrintDetailsByOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPrintDetailsByOrderStmt: %w", cerr)
		}
	}
	if q.revokeAuthTokenStmt != nil {
		if cerr := q.revokeAuthTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing revokeAuthTokenStmt: %w", cerr)
		}
	}
	if q.updateAuthTokensStmt != nil {
		if cerr := q.updateAuthTokensStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAuthTokensStmt: %w", cerr)
		}
	}
	if q.updateFlyerOrderStatusStmt != nil {
		if cerr := q.updateFlyerOrderStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFlyerOrderStatusStmt: %w", cerr)
		}
	}
	if q.updateUserByPhoneNumberStmt != nil {
		if cerr := q.updateUserByPhoneNumberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserByPhoneNumberStmt: %w", cerr)
		}
	}
	if q.upsertOtpVerificationStmt != nil {
		if cerr := q.upsertOtpVerificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertOtpVerificationStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	createAuthTokenStmt            *sql.Stmt
	createDistributionDetailStmt   *sql.Stmt
	createFlyerOrderStmt           *sql.Stmt
	createPrintDetailStmt          *sql.Stmt
	createUserStmt                 *sql.Stmt
	deleteAuthTokenByIDStmt        *sql.Stmt
	deleteAuthTokensByUserIDStmt   *sql.Stmt
	deleteOTPByPhoneNumberStmt     *sql.Stmt
	getAuthTokenByHashStmt         *sql.Stmt
	getAuthTokenByIDStmt           *sql.Stmt
	getAuthTokenByRefreshTokenStmt *sql.Stmt
	getFlyerOrderStmt              *sql.Stmt
	getOTPByPhoneNumberStmt        *sql.Stmt
	getUserStmt                    *sql.Stmt
	getUserByPhoneNumberStmt       *sql.Stmt
	listAuthTokensByUserIDStmt     *sql.Stmt
	listDistributionByOrderStmt    *sql.Stmt
	listFlyerOrdersByUserStmt      *sql.Stmt
	listOTPVerificationsStmt       *sql.Stmt
	listPrintDetailsByOrderStmt    *sql.Stmt
	revokeAuthTokenStmt            *sql.Stmt
	updateAuthTokensStmt           *sql.Stmt
	updateFlyerOrderStatusStmt     *sql.Stmt
	updateUserByPhoneNumberStmt    *sql.Stmt
	upsertOtpVerificationStmt      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		createAuthTokenStmt:            q.createAuthTokenStmt,
		createDistributionDetailStmt:   q.createDistributionDetailStmt,
		createFlyerOrderStmt:           q.createFlyerOrderStmt,
		createPrintDetailStmt:          q.createPrintDetailStmt,
		createUserStmt:                 q.createUserStmt,
		deleteAuthTokenByIDStmt:        q.deleteAuthTokenByIDStmt,
		deleteAuthTokensByUserIDStmt:   q.deleteAuthTokensByUserIDStmt,
		deleteOTPByPhoneNumberStmt:     q.deleteOTPByPhoneNumberStmt,
		getAuthTokenByHashStmt:         q.getAuthTokenByHashStmt,
		getAuthTokenByIDStmt:           q.getAuthTokenByIDStmt,
		getAuthTokenByRefreshTokenStmt: q.getAuthTokenByRefreshTokenStmt,
		getFlyerOrderStmt:              q.getFlyerOrderStmt,
		getOTPByPhoneNumberStmt:        q.getOTPByPhoneNumberStmt,
		getUserStmt:                    q.getUserStmt,
		getUserByPhoneNumberStmt:       q.getUserByPhoneNumberStmt,
		listAuthTokensByUserIDStmt:     q.listAuthTokensByUserIDStmt,
		listDistributionByOrderStmt:    q.listDistributionByOrderStmt,
		listFlyerOrdersByUserStmt:      q.listFlyerOrdersByUserStmt,
		listOTPVerificationsStmt:       q.listOTPVerificationsStmt,
		listPrintDetailsByOrderStmt:    q.listPrintDetailsByOrderStmt,
		revokeAuthTokenStmt:            q.revokeAuthTokenStmt,
		updateAuthTokensStmt:           q.updateAuthTokensStmt,
		updateFlyerOrderStatusStmt:     q.updateFlyerOrderStatusStmt,
		updateUserByPhoneNumberStmt:    q.updateUserByPhoneNumberStmt,
		upsertOtpVerificationStmt:      q.upsertOtpVerificationStmt,
	}
}
