// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createDistributionDetailStmt, err = db.PrepareContext(ctx, createDistributionDetail); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDistributionDetail: %w", err)
	}
	if q.createFlyerOrderStmt, err = db.PrepareContext(ctx, createFlyerOrder); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFlyerOrder: %w", err)
	}
	if q.createOTPVerificationStmt, err = db.PrepareContext(ctx, createOTPVerification); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOTPVerification: %w", err)
	}
	if q.createPrintDetailStmt, err = db.PrepareContext(ctx, createPrintDetail); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePrintDetail: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteOTPByPhoneNumberStmt, err = db.PrepareContext(ctx, deleteOTPByPhoneNumber); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOTPByPhoneNumber: %w", err)
	}
	if q.getFlyerOrderStmt, err = db.PrepareContext(ctx, getFlyerOrder); err != nil {
		return nil, fmt.Errorf("error preparing query GetFlyerOrder: %w", err)
	}
	if q.getOTPByPhoneNumberStmt, err = db.PrepareContext(ctx, getOTPByPhoneNumber); err != nil {
		return nil, fmt.Errorf("error preparing query GetOTPByPhoneNumber: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByPhoneNumberStmt, err = db.PrepareContext(ctx, getUserByPhoneNumber); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByPhoneNumber: %w", err)
	}
	if q.listDistributionByOrderStmt, err = db.PrepareContext(ctx, listDistributionByOrder); err != nil {
		return nil, fmt.Errorf("error preparing query ListDistributionByOrder: %w", err)
	}
	if q.listFlyerOrdersByUserStmt, err = db.PrepareContext(ctx, listFlyerOrdersByUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListFlyerOrdersByUser: %w", err)
	}
	if q.listOTPVerificationsStmt, err = db.PrepareContext(ctx, listOTPVerifications); err != nil {
		return nil, fmt.Errorf("error preparing query ListOTPVerifications: %w", err)
	}
	if q.listPrintDetailsByOrderStmt, err = db.PrepareContext(ctx, listPrintDetailsByOrder); err != nil {
		return nil, fmt.Errorf("error preparing query ListPrintDetailsByOrder: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.updateFlyerOrderStatusStmt, err = db.PrepareContext(ctx, updateFlyerOrderStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFlyerOrderStatus: %w", err)
	}
	if q.updateOTPStmt, err = db.PrepareContext(ctx, updateOTP); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOTP: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createDistributionDetailStmt != nil {
		if cerr := q.createDistributionDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDistributionDetailStmt: %w", cerr)
		}
	}
	if q.createFlyerOrderStmt != nil {
		if cerr := q.createFlyerOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFlyerOrderStmt: %w", cerr)
		}
	}
	if q.createOTPVerificationStmt != nil {
		if cerr := q.createOTPVerificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOTPVerificationStmt: %w", cerr)
		}
	}
	if q.createPrintDetailStmt != nil {
		if cerr := q.createPrintDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPrintDetailStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteOTPByPhoneNumberStmt != nil {
		if cerr := q.deleteOTPByPhoneNumberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOTPByPhoneNumberStmt: %w", cerr)
		}
	}
	if q.getFlyerOrderStmt != nil {
		if cerr := q.getFlyerOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFlyerOrderStmt: %w", cerr)
		}
	}
	if q.getOTPByPhoneNumberStmt != nil {
		if cerr := q.getOTPByPhoneNumberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOTPByPhoneNumberStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByPhoneNumberStmt != nil {
		if cerr := q.getUserByPhoneNumberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByPhoneNumberStmt: %w", cerr)
		}
	}
	if q.listDistributionByOrderStmt != nil {
		if cerr := q.listDistributionByOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listDistributionByOrderStmt: %w", cerr)
		}
	}
	if q.listFlyerOrdersByUserStmt != nil {
		if cerr := q.listFlyerOrdersByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFlyerOrdersByUserStmt: %w", cerr)
		}
	}
	if q.listOTPVerificationsStmt != nil {
		if cerr := q.listOTPVerificationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listOTPVerificationsStmt: %w", cerr)
		}
	}
	if q.listPrintDetailsByOrderStmt != nil {
		if cerr := q.listPrintDetailsByOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPrintDetailsByOrderStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.updateFlyerOrderStatusStmt != nil {
		if cerr := q.updateFlyerOrderStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFlyerOrderStatusStmt: %w", cerr)
		}
	}
	if q.updateOTPStmt != nil {
		if cerr := q.updateOTPStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOTPStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	createDistributionDetailStmt *sql.Stmt
	createFlyerOrderStmt         *sql.Stmt
	createOTPVerificationStmt    *sql.Stmt
	createPrintDetailStmt        *sql.Stmt
	createUserStmt               *sql.Stmt
	deleteOTPByPhoneNumberStmt   *sql.Stmt
	getFlyerOrderStmt            *sql.Stmt
	getOTPByPhoneNumberStmt      *sql.Stmt
	getUserStmt                  *sql.Stmt
	getUserByPhoneNumberStmt     *sql.Stmt
	listDistributionByOrderStmt  *sql.Stmt
	listFlyerOrdersByUserStmt    *sql.Stmt
	listOTPVerificationsStmt     *sql.Stmt
	listPrintDetailsByOrderStmt  *sql.Stmt
	listUsersStmt                *sql.Stmt
	updateFlyerOrderStatusStmt   *sql.Stmt
	updateOTPStmt                *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		createDistributionDetailStmt: q.createDistributionDetailStmt,
		createFlyerOrderStmt:         q.createFlyerOrderStmt,
		createOTPVerificationStmt:    q.createOTPVerificationStmt,
		createPrintDetailStmt:        q.createPrintDetailStmt,
		createUserStmt:               q.createUserStmt,
		deleteOTPByPhoneNumberStmt:   q.deleteOTPByPhoneNumberStmt,
		getFlyerOrderStmt:            q.getFlyerOrderStmt,
		getOTPByPhoneNumberStmt:      q.getOTPByPhoneNumberStmt,
		getUserStmt:                  q.getUserStmt,
		getUserByPhoneNumberStmt:     q.getUserByPhoneNumberStmt,
		listDistributionByOrderStmt:  q.listDistributionByOrderStmt,
		listFlyerOrdersByUserStmt:    q.listFlyerOrdersByUserStmt,
		listOTPVerificationsStmt:     q.listOTPVerificationsStmt,
		listPrintDetailsByOrderStmt:  q.listPrintDetailsByOrderStmt,
		listUsersStmt:                q.listUsersStmt,
		updateFlyerOrderStatusStmt:   q.updateFlyerOrderStatusStmt,
		updateOTPStmt:                q.updateOTPStmt,
	}
}
