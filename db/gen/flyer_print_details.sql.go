// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: flyer_print_details.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPrintDetail = `-- name: CreatePrintDetail :one
INSERT INTO flyer_print_details
    (order_id, upload_type, design_file, flyer_size, paper_quality, flyer_quantity)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, order_id, upload_type, design_file, flyer_size, paper_quality, flyer_quantity, created_at
`

type CreatePrintDetailParams struct {
	OrderID       uuid.NullUUID  `json:"order_id"`
	UploadType    string         `json:"upload_type"`
	DesignFile    sql.NullString `json:"design_file"`
	FlyerSize     sql.NullString `json:"flyer_size"`
	PaperQuality  sql.NullString `json:"paper_quality"`
	FlyerQuantity int32          `json:"flyer_quantity"`
}

func (q *Queries) CreatePrintDetail(ctx context.Context, arg CreatePrintDetailParams) (FlyerPrintDetail, error) {
	row := q.queryRow(ctx, q.createPrintDetailStmt, createPrintDetail,
		arg.OrderID,
		arg.UploadType,
		arg.DesignFile,
		arg.FlyerSize,
		arg.PaperQuality,
		arg.FlyerQuantity,
	)
	var i FlyerPrintDetail
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UploadType,
		&i.DesignFile,
		&i.FlyerSize,
		&i.PaperQuality,
		&i.FlyerQuantity,
		&i.CreatedAt,
	)
	return i, err
}

const listPrintDetailsByOrder = `-- name: ListPrintDetailsByOrder :many
SELECT id, order_id, upload_type, design_file, flyer_size, paper_quality, flyer_quantity, created_at FROM flyer_print_details
WHERE order_id = $1
`

func (q *Queries) ListPrintDetailsByOrder(ctx context.Context, orderID uuid.NullUUID) ([]FlyerPrintDetail, error) {
	rows, err := q.query(ctx, q.listPrintDetailsByOrderStmt, listPrintDetailsByOrder, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FlyerPrintDetail
	for rows.Next() {
		var i FlyerPrintDetail
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.UploadType,
			&i.DesignFile,
			&i.FlyerSize,
			&i.PaperQuality,
			&i.FlyerQuantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
