// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth_tokens.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAuthToken = `-- name: CreateAuthToken :one
INSERT INTO auth_tokens (
    user_id,
    auth_token,
    refresh_token,
    user_agent,
    ip_address,
    auth_token_expires_at,
    refresh_token_expires_at,
    auth_token_hash
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, user_id, auth_token, refresh_token, user_agent, ip_address, created_at, auth_token_expires_at, refresh_token_expires_at, auth_token_hash, revoked
`

type CreateAuthTokenParams struct {
	UserID                uuid.UUID      `json:"user_id"`
	AuthToken             string         `json:"auth_token"`
	RefreshToken          string         `json:"refresh_token"`
	UserAgent             sql.NullString `json:"user_agent"`
	IpAddress             sql.NullString `json:"ip_address"`
	AuthTokenExpiresAt    sql.NullTime   `json:"auth_token_expires_at"`
	RefreshTokenExpiresAt sql.NullTime   `json:"refresh_token_expires_at"`
	AuthTokenHash         sql.NullString `json:"auth_token_hash"`
}

func (q *Queries) CreateAuthToken(ctx context.Context, arg CreateAuthTokenParams) (AuthToken, error) {
	row := q.queryRow(ctx, q.createAuthTokenStmt, createAuthToken,
		arg.UserID,
		arg.AuthToken,
		arg.RefreshToken,
		arg.UserAgent,
		arg.IpAddress,
		arg.AuthTokenExpiresAt,
		arg.RefreshTokenExpiresAt,
		arg.AuthTokenHash,
	)
	var i AuthToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AuthToken,
		&i.RefreshToken,
		&i.UserAgent,
		&i.IpAddress,
		&i.CreatedAt,
		&i.AuthTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.AuthTokenHash,
		&i.Revoked,
	)
	return i, err
}

const deleteAuthTokenByID = `-- name: DeleteAuthTokenByID :exec
DELETE FROM auth_tokens
WHERE id = $1
`

func (q *Queries) DeleteAuthTokenByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteAuthTokenByIDStmt, deleteAuthTokenByID, id)
	return err
}

const deleteAuthTokensByUserID = `-- name: DeleteAuthTokensByUserID :exec
DELETE FROM auth_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteAuthTokensByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteAuthTokensByUserIDStmt, deleteAuthTokensByUserID, userID)
	return err
}

const getAuthTokenByHash = `-- name: GetAuthTokenByHash :one
SELECT id, user_id, auth_token, refresh_token, user_agent, ip_address, created_at, auth_token_expires_at, refresh_token_expires_at, auth_token_hash, revoked FROM auth_tokens
WHERE auth_token_hash = $1
`

func (q *Queries) GetAuthTokenByHash(ctx context.Context, authTokenHash sql.NullString) (AuthToken, error) {
	row := q.queryRow(ctx, q.getAuthTokenByHashStmt, getAuthTokenByHash, authTokenHash)
	var i AuthToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AuthToken,
		&i.RefreshToken,
		&i.UserAgent,
		&i.IpAddress,
		&i.CreatedAt,
		&i.AuthTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.AuthTokenHash,
		&i.Revoked,
	)
	return i, err
}

const getAuthTokenByID = `-- name: GetAuthTokenByID :one
SELECT id, user_id, auth_token, refresh_token, user_agent, ip_address, created_at, auth_token_expires_at, refresh_token_expires_at, auth_token_hash, revoked FROM auth_tokens
WHERE id = $1
`

func (q *Queries) GetAuthTokenByID(ctx context.Context, id uuid.UUID) (AuthToken, error) {
	row := q.queryRow(ctx, q.getAuthTokenByIDStmt, getAuthTokenByID, id)
	var i AuthToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AuthToken,
		&i.RefreshToken,
		&i.UserAgent,
		&i.IpAddress,
		&i.CreatedAt,
		&i.AuthTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.AuthTokenHash,
		&i.Revoked,
	)
	return i, err
}

const getAuthTokenByRefreshToken = `-- name: GetAuthTokenByRefreshToken :one
SELECT id, user_id, auth_token, refresh_token, user_agent, ip_address, created_at, auth_token_expires_at, refresh_token_expires_at, auth_token_hash, revoked FROM auth_tokens
WHERE refresh_token = $1
`

func (q *Queries) GetAuthTokenByRefreshToken(ctx context.Context, refreshToken string) (AuthToken, error) {
	row := q.queryRow(ctx, q.getAuthTokenByRefreshTokenStmt, getAuthTokenByRefreshToken, refreshToken)
	var i AuthToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AuthToken,
		&i.RefreshToken,
		&i.UserAgent,
		&i.IpAddress,
		&i.CreatedAt,
		&i.AuthTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.AuthTokenHash,
		&i.Revoked,
	)
	return i, err
}

const listAuthTokensByUserID = `-- name: ListAuthTokensByUserID :many
SELECT id, user_id, auth_token, refresh_token, user_agent, ip_address, created_at, auth_token_expires_at, refresh_token_expires_at, auth_token_hash, revoked FROM auth_tokens
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListAuthTokensByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListAuthTokensByUserID(ctx context.Context, arg ListAuthTokensByUserIDParams) ([]AuthToken, error) {
	rows, err := q.query(ctx, q.listAuthTokensByUserIDStmt, listAuthTokensByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuthToken
	for rows.Next() {
		var i AuthToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AuthToken,
			&i.RefreshToken,
			&i.UserAgent,
			&i.IpAddress,
			&i.CreatedAt,
			&i.AuthTokenExpiresAt,
			&i.RefreshTokenExpiresAt,
			&i.AuthTokenHash,
			&i.Revoked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeAuthToken = `-- name: RevokeAuthToken :exec
UPDATE auth_tokens
SET revoked = TRUE
WHERE id = $1
`

func (q *Queries) RevokeAuthToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.revokeAuthTokenStmt, revokeAuthToken, id)
	return err
}

const updateAuthTokens = `-- name: UpdateAuthTokens :one
UPDATE auth_tokens
SET
  auth_token = $2,
  refresh_token = $3,
  auth_token_expires_at = $4,
  refresh_token_expires_at = $5,
  auth_token_hash = $6,
  revoked = $7
WHERE id = $1
RETURNING id, user_id, auth_token, refresh_token, user_agent, ip_address, created_at, auth_token_expires_at, refresh_token_expires_at, auth_token_hash, revoked
`

type UpdateAuthTokensParams struct {
	ID                    uuid.UUID      `json:"id"`
	AuthToken             string         `json:"auth_token"`
	RefreshToken          string         `json:"refresh_token"`
	AuthTokenExpiresAt    sql.NullTime   `json:"auth_token_expires_at"`
	RefreshTokenExpiresAt sql.NullTime   `json:"refresh_token_expires_at"`
	AuthTokenHash         sql.NullString `json:"auth_token_hash"`
	Revoked               sql.NullBool   `json:"revoked"`
}

func (q *Queries) UpdateAuthTokens(ctx context.Context, arg UpdateAuthTokensParams) (AuthToken, error) {
	row := q.queryRow(ctx, q.updateAuthTokensStmt, updateAuthTokens,
		arg.ID,
		arg.AuthToken,
		arg.RefreshToken,
		arg.AuthTokenExpiresAt,
		arg.RefreshTokenExpiresAt,
		arg.AuthTokenHash,
		arg.Revoked,
	)
	var i AuthToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AuthToken,
		&i.RefreshToken,
		&i.UserAgent,
		&i.IpAddress,
		&i.CreatedAt,
		&i.AuthTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.AuthTokenHash,
		&i.Revoked,
	)
	return i, err
}
