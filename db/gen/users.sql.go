// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (account_type, phone_number, email, name, photo, gender, aadhar_number, aadhar_photo_front, aadhar_photo_back, vehicle_type, age, gst_number, admin_role)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
RETURNING id, account_type, phone_number, email, name, photo, gender, aadhar_number, aadhar_photo_front, aadhar_photo_back, vehicle_type, age, gst_number, admin_role, created_at, updated_at
`

type CreateUserParams struct {
	AccountType      string         `json:"account_type"`
	PhoneNumber      string         `json:"phone_number"`
	Email            sql.NullString `json:"email"`
	Name             string         `json:"name"`
	Photo            sql.NullString `json:"photo"`
	Gender           NullGenderEnum `json:"gender"`
	AadharNumber     sql.NullString `json:"aadhar_number"`
	AadharPhotoFront sql.NullString `json:"aadhar_photo_front"`
	AadharPhotoBack  sql.NullString `json:"aadhar_photo_back"`
	VehicleType      sql.NullString `json:"vehicle_type"`
	Age              sql.NullInt32  `json:"age"`
	GstNumber        sql.NullString `json:"gst_number"`
	AdminRole        sql.NullString `json:"admin_role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.AccountType,
		arg.PhoneNumber,
		arg.Email,
		arg.Name,
		arg.Photo,
		arg.Gender,
		arg.AadharNumber,
		arg.AadharPhotoFront,
		arg.AadharPhotoBack,
		arg.VehicleType,
		arg.Age,
		arg.GstNumber,
		arg.AdminRole,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountType,
		&i.PhoneNumber,
		&i.Email,
		&i.Name,
		&i.Photo,
		&i.Gender,
		&i.AadharNumber,
		&i.AadharPhotoFront,
		&i.AadharPhotoBack,
		&i.VehicleType,
		&i.Age,
		&i.GstNumber,
		&i.AdminRole,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, account_type, phone_number, email, name, photo, gender, aadhar_number, aadhar_photo_front, aadhar_photo_back, vehicle_type, age, gst_number, admin_role, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountType,
		&i.PhoneNumber,
		&i.Email,
		&i.Name,
		&i.Photo,
		&i.Gender,
		&i.AadharNumber,
		&i.AadharPhotoFront,
		&i.AadharPhotoBack,
		&i.VehicleType,
		&i.Age,
		&i.GstNumber,
		&i.AdminRole,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, account_type, phone_number, email, name, photo, gender, aadhar_number, aadhar_photo_front, aadhar_photo_back, vehicle_type, age, gst_number, admin_role, created_at, updated_at
FROM users
WHERE phone_number = $1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.queryRow(ctx, q.getUserByPhoneNumberStmt, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountType,
		&i.PhoneNumber,
		&i.Email,
		&i.Name,
		&i.Photo,
		&i.Gender,
		&i.AadharNumber,
		&i.AadharPhotoFront,
		&i.AadharPhotoBack,
		&i.VehicleType,
		&i.Age,
		&i.GstNumber,
		&i.AdminRole,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
